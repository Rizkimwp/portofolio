{"version":3,"file":"static/js/281.957bdb53.chunk.js","mappings":"0JAMA,MAuFA,EAvF4BA,KAC1B,MAAM,MAAEC,EAAK,aAAEC,EAAY,SAAEC,EAAQ,UAAEC,EAAS,UAAEC,EAAS,WAAEC,EAAU,MAAEC,IACzEC,EAAAA,EAAAA,KA+DF,OACEC,EAAAA,EAAAA,MAAA,OACEC,UAAU,kCACVC,SAAU,EACVC,UAbmBC,IACjBP,IAEU,cAAVO,EAAEC,KAAqBV,EAAU,QACvB,eAAVS,EAAEC,KAAsBV,EAAU,SACxB,cAAVS,EAAEC,KAAqBV,EAAU,QAAO,EAQjBW,SAAA,EAEzBC,EAAAA,EAAAA,KAAA,MAAIN,UAAU,qBAAoBK,SAAC,iBACnCC,EAAAA,EAAAA,KAAA,OAAKN,UAAU,OAAMK,SApEHE,MAClB,MAAMC,EAAYjB,EAAMkB,KAAKC,GAAQ,IAAIA,KAsBzC,OApBIlB,GACFA,EAAamB,MAAMC,SAAQ,CAACF,EAAKG,KAC/BH,EAAIE,SAAQ,CAACE,EAAMC,KACjB,GAAa,IAATD,EAAY,CACd,MAAME,EAASvB,EAASsB,EAAIA,EACtBE,EAASxB,EAASoB,EAAIA,EAG1BI,GAAU,GACVA,EAAST,EAAUU,QACnBF,GAAU,GACVA,EAASR,EAAU,GAAGU,SAEtBV,EAAUS,GAAQD,GAAUF,EAEhC,IACA,IAICN,EAAUC,KAAI,CAACC,EAAKG,KACzBP,EAAAA,EAAAA,KAAA,OAAaN,UAAU,OAAMK,SAC1BK,EAAID,KAAI,CAACK,EAAMC,KACdT,EAAAA,EAAAA,KAAA,OAEEN,UAAW,mBACA,IAATc,EACI,YACS,IAATA,EACA,YACS,IAATA,EACA,YACS,IAATA,EACA,YACS,IAATA,EACA,YACS,IAATA,EACA,YACS,IAATA,EACA,YACA,gBAhBDC,MAHDF,IAwBV,EAoBqBN,MACvBR,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcK,SAAA,CAAC,UAAQR,KACrCD,IACCU,EAAAA,EAAAA,KAAA,OAAKN,UAAU,sCAAqCK,SAAC,gBAEvDC,EAAAA,EAAAA,KAAA,UACEa,QAASxB,EACTK,UAAU,gDAA+CK,SAExDT,EAAa,eAAiB,iBAE7B,C","sources":["pages/StackGame.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Board from '../components/Board';\nimport Scoreboard from '../components/ScodeBoard';\nimport { useTetris } from '../hooks/useTetris';\n\n\nconst StackGame: React.FC = () => {\n  const { board, currentPiece, position, movePiece, resetGame, isGameOver, score } =\n  useTetris();\n\n  const renderBoard = () => {\n    const tempBoard = board.map((row) => [...row]);\n  \n    if (currentPiece) {\n      currentPiece.shape.forEach((row, y) => {\n        row.forEach((cell, x) => {\n          if (cell !== 0) {\n            const boardX = position.x + x;\n            const boardY = position.y + y;\n  \n            if (\n              boardY >= 0 &&\n              boardY < tempBoard.length &&\n              boardX >= 0 &&\n              boardX < tempBoard[0].length\n            ) {\n              tempBoard[boardY][boardX] = cell;\n            }\n          }\n        });\n      });\n    }\n  \n    return tempBoard.map((row, y) => (\n      <div key={y} className=\"flex\">\n        {row.map((cell, x) => (\n          <div\n            key={x}\n            className={`w-6 h-6 border ${\n              cell === 0\n                ? 'bg-color1' // Warna kosong\n                : cell === 1\n                ? 'bg-color2' // Tetromino tipe 1\n                : cell === 2\n                ? 'bg-color3' // Tetromino tipe 2\n                : cell === 3\n                ? 'bg-color4' // Tetromino tipe 3\n                : cell === 4\n                ? 'bg-color5' // Tetromino tipe 4\n                : cell === 5\n                ? 'bg-color6' // Tetromino tipe 5\n                : cell === 6\n                ? 'bg-color7' // Tetromino tipe 6\n                : 'bg-pink-500' // Tetromino tipe 7\n            }`}\n          ></div>\n        ))}\n      </div>\n    ));\n  };\n  \n  \nconst handleKeyDown = (e: React.KeyboardEvent) => {\n  if (isGameOver) return;\n\n  if (e.key === 'ArrowLeft') movePiece('left');\n  if (e.key === 'ArrowRight') movePiece('right');\n  if (e.key === 'ArrowDown') movePiece('down');\n};\n\n\nreturn (\n  <div\n    className=\"flex flex-col items-center mt-4\"\n    tabIndex={0}\n    onKeyDown={handleKeyDown}\n  >\n    <h1 className=\"text-2xl font-bold\">Tetris Game</h1>\n    <div className=\"mt-4\">{renderBoard()}</div>\n    <div className=\"mt-4 text-lg\">Score: {score}</div>\n    {isGameOver && (\n      <div className=\"mt-4 text-red-500 text-lg font-bold\">Game Over!</div>\n    )}\n    <button\n      onClick={resetGame}\n      className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded\"\n    >\n      {isGameOver ? 'Restart Game' : 'Start Game'}\n    </button>\n  </div>\n);\n};\n\nexport default StackGame;\n"],"names":["StackGame","board","currentPiece","position","movePiece","resetGame","isGameOver","score","useTetris","_jsxs","className","tabIndex","onKeyDown","e","key","children","_jsx","renderBoard","tempBoard","map","row","shape","forEach","y","cell","x","boardX","boardY","length","onClick"],"sourceRoot":""}